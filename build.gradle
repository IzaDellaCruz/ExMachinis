plugins {
    id 'idea'
    id 'java-library'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.0.86'
    id 'org.gradle.crypto.checksum' version '1.4.0'
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

// Default run configurations.
// These can be tweaked, removed, or duplicated as needed.
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    // This run config launches GameTestServer and runs all registered gametests, then exits.
    // By default, the server will crash when no gametests are provided.
    // The gametest system is also enabled by default for other run configs under the /test command.
    gameTestServer {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    mavenLocal()
    exclusiveContent {
        forRepository {repositories.mavenLocal()}
        forRepository {
            maven {
                name "Modrinth"
                url "https://api.modrinth.com/maven"
            }
        }
        filter {
            includeGroup "maven.modrinth"
        }
    }
    exclusiveContent {
        forRepository {repositories.mavenLocal()}
        forRepository {
            maven {
                name "CurseMaven"
                url "https://www.cursemaven.com"
            }
        }
        filter {
            includeGroup "curse.maven"
        }
    }
}

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"

//    runtimeOnly fg.deobf("curse.maven:pipez-443900:4713656")
//    runtimeOnly fg.deobf("curse.maven:cobblefordays-349460:4653625")
//    runtimeOnly fg.deobf("curse.maven:Phosphophyllite-412551:4806749")
//    runtimeOnly fg.deobf("curse.maven:storage-drawers-223852:4668552")
    runtimeOnly 'curse.maven:jade-324717:5109393'
    runtimeOnly 'maven.modrinth:mekanism:10.5.13.35'

    implementation 'maven.modrinth:jei:RHAv6XOz'
    implementation 'maven.modrinth:novacore:2.0.0'
    implementation 'maven.modrinth:exnihilosequentia:1.20.4-6.0.0-build.17'
    implementation 'maven.modrinth:ex-nihilo-sequentia-jei-addon:1.0.0'
}

jar {
    archiveBaseName.set("${mod_id}-${minecraft_version}")
    manifest {
        attributes([
            "Specification-Title"     : mod_id,
            "Specification-Vendor"    : group,
            "Specification-Version"   : "1", // We are version 1 of ourselves
            "Implementation-Title"    : project.name,
            "Implementation-Version"  : project.jar.archiveVersion,
        ])
    }

    // The settings below make sure that your build is reproducible
    // More information at https://docs.gradle.org/current/userguide/working_with_files.html#sec:reproducible_archives
    preserveFileTimestamps = false
    reproducibleFileOrder = true
}

// generate checksum for output jar
import org.gradle.crypto.checksum.Checksum
tasks.register('createChecksums', Checksum) {
    dependsOn jar

    inputFiles.setFrom(jar.outputs.files)
    checksumAlgorithm.set(Checksum.Algorithm.SHA512)
    appendFileNameToChecksum.set(true)
}
build.finalizedBy('createChecksums')

publishing {
    publications {
        register('mavenJava', MavenPublication) {
            from components.java
        }
    }
    repositories {
        maven {
            url "file://${project.projectDir}/repo"
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
